digraph classDiagram{
graph [splines=ortho]

"org.assertj.core.api.AbstractOffsetTimeAssert" -> "org.assertj.core.api.AbstractTemporalAssert"[arrowhead = onormal];
"org.assertj.core.error.ConditionAndGroupGenericParameterTypeShouldBeTheSame" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.DoubleAssert" -> "org.assertj.core.api.AbstractDoubleAssert"[arrowhead = onormal];
"org.assertj.core.error.ElementsShouldSatisfy" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.ClassBasedNavigableListAssert" -> "org.assertj.core.api.AbstractListAssert"[arrowhead = onormal];
"org.assertj.core.api.AtomicMarkableReferenceAssert" -> "org.assertj.core.api.AbstractAtomicReferenceAssert"[arrowhead = onormal];
"org.assertj.core.api.FloatArrayAssert" -> "org.assertj.core.api.AbstractFloatArrayAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeGreater" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveSameSizeAs" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotStartWith" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.PathAssert" -> "org.assertj.core.api.AbstractPathAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeFile" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveContent" -> "org.assertj.core.error.AbstractShouldHaveTextContent"[arrowhead = onormal];
"org.assertj.core.description.EmptyTextDescription" -> "org.assertj.core.description.TextDescription"[arrowhead = onormal];
"org.assertj.core.api.AbstractShortAssert" -> "org.assertj.core.api.AbstractComparableAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeNormalized" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeCanonicalPath" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractBigIntegerAssert" -> "org.assertj.core.api.AbstractComparableAssert"[arrowhead = onormal];
"org.assertj.core.error.uri.ShouldHaveFragment" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.OptionalShouldContainInstanceOf" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeSubstring" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.uri.ShouldHaveAnchor" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeLess" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotEndWith" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveLineCount" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.uri.ShouldHavePath" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainExactly" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotMatch" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ElementsShouldHaveAtLeast" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeAnArray" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotContain" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.ByteArrayAssert" -> "org.assertj.core.api.AbstractByteArrayAssert"[arrowhead = onormal];
"org.assertj.core.util.BigDecimalComparator" -> "org.assertj.core.util.AbstractComparableNumberComparator"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeEmpty" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotContainCharSequence" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeInSameYear" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeAtIndex" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveDateField" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.Java6AbstractStandardSoftAssertions" -> "org.assertj.core.api.AbstractSoftAssertions"[arrowhead = onormal];
"org.assertj.core.api.JUnitSoftAssertions" -> "org.assertj.core.api.AbstractStandardSoftAssertions"[arrowhead = onormal];
"org.assertj.core.api.AbstractMapAssert" -> "org.assertj.core.api.AbstractObjectAssert"[arrowhead = onormal];
"org.assertj.core.error.OptionalShouldBeEmpty" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainOnlyNulls" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBe" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeBlank" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainOnly" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.util.diff.ChangeDelta" -> "org.assertj.core.util.diff.Delta"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveTime" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.GenericComparableAssert" -> "org.assertj.core.api.AbstractComparableAssert"[arrowhead = onormal];
"org.assertj.core.internal.BigDecimals" -> "org.assertj.core.internal.Numbers"[arrowhead = onormal];
"org.assertj.core.api.AbstractPredicateAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.api.IntegerAssert" -> "org.assertj.core.api.AbstractIntegerAssert"[arrowhead = onormal];
"org.assertj.core.api.ObjectArrayAssert" -> "org.assertj.core.api.AbstractObjectArrayAssert"[arrowhead = onormal];
"org.assertj.core.api.PredicateAssert" -> "org.assertj.core.api.AbstractPredicateAssert"[arrowhead = onormal];
"org.assertj.core.api.FloatAssert" -> "org.assertj.core.api.AbstractFloatAssert"[arrowhead = onormal];
"org.assertj.core.api.ClassBasedNavigableIterableAssert" -> "org.assertj.core.api.AbstractIterableAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeBeforeYear" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeInSameMonth" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.uri.ShouldHavePort" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractIntArrayAssert" -> "org.assertj.core.api.AbstractArrayAssert"[arrowhead = onormal];
"org.assertj.core.internal.StandardComparisonStrategy" -> "org.assertj.core.internal.AbstractComparisonStrategy"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveAtLeastOneElementOfType" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotBeEqual" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeOfClassIn" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.OptionalDoubleAssert" -> "org.assertj.core.api.AbstractOptionalDoubleAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveSameHourAs" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotHaveDuplicates" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractObjectArrayAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.api.FactoryBasedNavigableIterableAssert" -> "org.assertj.core.api.AbstractIterableAssert"[arrowhead = onormal];
"org.assertj.core.api.OptionalAssert" -> "org.assertj.core.api.AbstractOptionalAssert"[arrowhead = onormal];
"org.assertj.core.api.ObjectAssert" -> "org.assertj.core.api.AbstractObjectAssert"[arrowhead = onormal];
"org.assertj.core.error.ElementsShouldHaveExactly" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeMarked" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainAtIndex" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractOptionalLongAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.api.IntPredicateAssert" -> "org.assertj.core.api.AbstractPredicateLikeAssert"[arrowhead = onormal];
"org.assertj.core.api.HamcrestCondition" -> "org.assertj.core.api.Condition"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveStamp" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractFutureAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.error.future.ShouldBeCancelled" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractIntegerAssert" -> "org.assertj.core.api.AbstractComparableAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainSubsequence" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotAccept" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractPathAssert" -> "org.assertj.core.api.AbstractComparableAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveName" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.internal.IterableElementComparisonStrategy" -> "org.assertj.core.internal.StandardComparisonStrategy"[arrowhead = onormal];
"org.assertj.core.internal.Doubles" -> "org.assertj.core.internal.RealNumbers"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveOnlyElementsOfType" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeSorted" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveSuppressedException" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractOptionalAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeAfterOrEqualsTo" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractIterableAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.error.AbstractShouldHaveTextContent" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.uri.ShouldHaveProtocol" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.OptionalLongAssert" -> "org.assertj.core.api.AbstractOptionalLongAssert"[arrowhead = onormal];
"org.assertj.core.api.AbstractStandardSoftAssertions" -> "org.assertj.core.api.Java6AbstractStandardSoftAssertions"[arrowhead = onormal];
"org.assertj.core.api.DoublePredicateAssert" -> "org.assertj.core.api.AbstractPredicateLikeAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotContainSubsequence" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.future.ShouldNotBeCompleted" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveReference" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.Java6BDDSoftAssertions" -> "org.assertj.core.api.Java6AbstractBDDSoftAssertions"[arrowhead = onormal];
"org.assertj.core.util.BigIntegerComparator" -> "org.assertj.core.util.AbstractComparableNumberComparator"[arrowhead = onormal];
"org.assertj.core.api.CompletableFutureAssert" -> "org.assertj.core.api.AbstractCompletableFutureAssert"[arrowhead = onormal];
"org.assertj.core.api.SoftAssertionIterableAssert" -> "org.assertj.core.api.FactoryBasedNavigableIterableAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeRegularFile" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.uri.ShouldHaveParameter" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.data.TemporalUnitWithinOffset" -> "org.assertj.core.data.TemporalUnitOffset"[arrowhead = onormal];
"org.assertj.core.error.ElementsShouldMatch" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.UriAssert" -> "org.assertj.core.api.AbstractUriAssert"[arrowhead = onormal];
"org.assertj.core.error.ClassModifierShouldBe" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.LongPredicateAssert" -> "org.assertj.core.api.AbstractPredicateLikeAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotMatchPattern" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.internal.ObjectArrayElementComparisonStrategy" -> "org.assertj.core.internal.StandardComparisonStrategy"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeReadable" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.filter.NotInFilter" -> "org.assertj.core.api.filter.FilterOperator"[arrowhead = onormal];
"org.assertj.core.api.AbstractZonedDateTimeAssert" -> "org.assertj.core.api.AbstractTemporalAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveSameHashCode" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.internal.IgnoringFieldsComparator" -> "org.assertj.core.internal.FieldByFieldComparator"[arrowhead = onormal];
"org.assertj.core.internal.RealNumbers" -> "org.assertj.core.internal.Numbers"[arrowhead = onormal];
"org.assertj.core.api.AbstractOptionalIntAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.api.AbstractInstantAssert" -> "org.assertj.core.api.AbstractTemporalAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveMethods" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeInSameMinute" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.BDDSoftAssertions" -> "org.assertj.core.api.AbstractBDDSoftAssertions"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotHaveSameClass" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainsOnlyOnce" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.future.ShouldHaveFailed" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldMatch" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.DateAssert" -> "org.assertj.core.api.AbstractDateAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveRootCauseExactlyInstance" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.SoftAssertions" -> "org.assertj.core.api.AbstractStandardSoftAssertions"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainCharSequence" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.LocalTimeAssert" -> "org.assertj.core.api.AbstractLocalTimeAssert"[arrowhead = onormal];
"org.assertj.core.condition.DoesNotHave" -> "org.assertj.core.condition.Negative"[arrowhead = onormal];
"org.assertj.core.api.IterableAssert" -> "org.assertj.core.api.FactoryBasedNavigableIterableAssert"[arrowhead = onormal];
"org.assertj.core.condition.AnyOf" -> "org.assertj.core.condition.Join"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeEqualNormalizingWhitespace" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveMessageMatchingRegex" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractListAssert" -> "org.assertj.core.api.AbstractIterableAssert"[arrowhead = onormal];
"org.assertj.core.error.uri.ShouldHaveQuery" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.UrlAssert" -> "org.assertj.core.api.AbstractUrlAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeSame" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.util.diff.myers.Snake" -> "org.assertj.core.util.diff.myers.PathNode"[arrowhead = onormal];
"org.assertj.core.error.ShouldStartWith" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveAtIndex" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AtomicLongAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeGreaterOrEqual" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotContainKey" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveRootCauseInstance" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveCause" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeEqualByComparingFieldByFieldRecursively" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveSameContent" -> "org.assertj.core.error.AbstractShouldHaveTextContent"[arrowhead = onormal];
"org.assertj.core.api.Java6JUnitSoftAssertions" -> "org.assertj.core.api.Java6AbstractStandardSoftAssertions"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainAnyOf" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.internal.Longs" -> "org.assertj.core.internal.Numbers"[arrowhead = onormal];
"org.assertj.core.api.DoubleArrayAssert" -> "org.assertj.core.api.AbstractDoubleArrayAssert"[arrowhead = onormal];
"org.assertj.core.api.BDDAssertions" -> "org.assertj.core.api.Assertions"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeInterface" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractEnumerableAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.api.ThrowableAssertAlternative" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeLessOrEqual" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainValues" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveMessage" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeToday" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractComparableAssert" -> "org.assertj.core.api.AbstractObjectAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeInstanceOfAny" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractLongArrayAssert" -> "org.assertj.core.api.AbstractArrayAssert"[arrowhead = onormal];
"org.assertj.core.api.AutoCloseableSoftAssertions" -> "org.assertj.core.api.SoftAssertions"[arrowhead = onormal];
"org.assertj.core.api.AbstractTemporalAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveBinaryContent" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainEntry" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeEqualToIgnoringFields" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.InstantAssert" -> "org.assertj.core.api.AbstractInstantAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeEqualIgnoringMinutes" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainExactlyInAnyOrder" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractAtomicReferenceAssert" -> "org.assertj.core.api.AbstractObjectAssert"[arrowhead = onormal];
"org.assertj.core.api.FutureAssert" -> "org.assertj.core.api.AbstractFutureAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveSize" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotBeEqualIgnoringWhitespace" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldOnlyHaveFields" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeInSameSecond" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHavePropertyOrField" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.uri.ShouldHaveHost" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.OffsetDateTimeAssert" -> "org.assertj.core.api.AbstractOffsetDateTimeAssert"[arrowhead = onormal];
"org.assertj.core.error.ElementsShouldBe" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.Java6SoftAssertions" -> "org.assertj.core.api.Java6AbstractStandardSoftAssertions"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeEqualWithinPercentage" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AutoCloseableBDDSoftAssertions" -> "org.assertj.core.api.BDDSoftAssertions"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeLowerCase" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AtomicIntegerFieldUpdaterAssert" -> "org.assertj.core.api.AbstractAtomicFieldUpdaterAssert"[arrowhead = onormal];
"org.assertj.core.api.AbstractBooleanArrayAssert" -> "org.assertj.core.api.AbstractArrayAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeCloseTo" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeInSameHourWindow" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.future.ShouldNotHaveFailed" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeEqualWithTimePrecision" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.LocalDateTimeAssert" -> "org.assertj.core.api.AbstractLocalDateTimeAssert"[arrowhead = onormal];
"org.assertj.core.condition.Negative" -> "org.assertj.core.api.Condition"[arrowhead = onormal];
"org.assertj.core.api.LongAssert" -> "org.assertj.core.api.AbstractLongAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveToString" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ElementsShouldBeExactly" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractObjectAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeEqualIgnoringNanos" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.internal.Characters" -> "org.assertj.core.internal.Comparables"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotBeInstance" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AssertionsForInterfaceTypes" -> "org.assertj.core.api.AssertionsForClassTypes"[arrowhead = onormal];
"org.assertj.core.api.LocalDateAssert" -> "org.assertj.core.api.AbstractLocalDateAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeBefore" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractShortArrayAssert" -> "org.assertj.core.api.AbstractArrayAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveFields" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractBigDecimalAssert" -> "org.assertj.core.api.AbstractComparableAssert"[arrowhead = onormal];
"org.assertj.core.error.OptionalShouldContain" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeAssignableFrom" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.internal.Bytes" -> "org.assertj.core.internal.Numbers"[arrowhead = onormal];
"org.assertj.core.api.AbstractInputStreamAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeAnnotation" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotContainPattern" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldEndWith" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ElementsShouldBeAtMost" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotHave" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.util.FloatComparator" -> "org.assertj.core.util.NullSafeComparator"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeEqualIgnoringSeconds" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveCauseExactlyInstance" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AtomicIntegerAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.api.AbstractArrayAssert" -> "org.assertj.core.api.AbstractEnumerableAssert"[arrowhead = onormal];
"org.assertj.core.api.ThrowableAssert" -> "org.assertj.core.api.AbstractThrowableAssert"[arrowhead = onormal];
"org.assertj.core.api.AbstractOptionalDoubleAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldContain" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.future.ShouldNotBeDone" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeBetween" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.StringAssert" -> "org.assertj.core.api.AbstractCharSequenceAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldEndWithPath" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.InputStreamAssert" -> "org.assertj.core.api.AbstractInputStreamAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveCauseInstance" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractByteAssert" -> "org.assertj.core.api.AbstractComparableAssert"[arrowhead = onormal];
"org.assertj.core.api.ListAssert" -> "org.assertj.core.api.FactoryBasedNavigableListAssert"[arrowhead = onormal];
"org.assertj.core.api.BigDecimalAssert" -> "org.assertj.core.api.AbstractBigDecimalAssert"[arrowhead = onormal];
"org.assertj.core.api.ShortArrayAssert" -> "org.assertj.core.api.AbstractShortArrayAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeExecutable" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.util.diff.myers.DiffNode" -> "org.assertj.core.util.diff.myers.PathNode"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeEqualIgnoringCase" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.OptionalDoubleShouldHaveValueCloseTo" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractCharSequenceAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.error.ElementsShouldHaveAtMost" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.uri.ShouldHaveUserInfo" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.CharSequenceAssert" -> "org.assertj.core.api.AbstractCharSequenceAssert"[arrowhead = onormal];
"org.assertj.core.util.AbstractComparableNumberComparator" -> "org.assertj.core.util.NullSafeComparator"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeEqualIgnoringTimezone" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeRelativePath" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractDateAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.api.AbstractLocalTimeAssert" -> "org.assertj.core.api.AbstractTemporalAssert"[arrowhead = onormal];
"org.assertj.core.api.AtomicReferenceAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveNoNullFields" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AtomicIntegerArrayAssert" -> "org.assertj.core.api.AbstractEnumerableAssert"[arrowhead = onormal];
"org.assertj.core.api.AbstractClassAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.api.AbstractUriAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.api.filter.NotFilter" -> "org.assertj.core.api.filter.FilterOperator"[arrowhead = onormal];
"org.assertj.core.api.SoftAssertionListAssert" -> "org.assertj.core.api.FactoryBasedNavigableListAssert"[arrowhead = onormal];
"org.assertj.core.api.AbstractFileAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotBeEqualWithinOffset" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractAtomicFieldUpdaterAssert" -> "org.assertj.core.api.AbstractObjectAssert"[arrowhead = onormal];
"org.assertj.core.api.AbstractLongAssert" -> "org.assertj.core.api.AbstractComparableAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotBeEqualWithinPercentage" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeSymbolicLink" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldAccept" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotBe" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.future.ShouldBeCompletedExceptionally" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeNullOrEmpty" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.IterableSizeAssert" -> "org.assertj.core.api.AbstractIterableSizeAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveSameClass" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractUrlAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.error.future.ShouldBeDone" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotBeEmpty" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.MapAssert" -> "org.assertj.core.api.AbstractMapAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotBeIn" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveNoFields" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.condition.Join" -> "org.assertj.core.api.Condition"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotContainSequence" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.data.TemporalUnitLessThanOffset" -> "org.assertj.core.data.TemporalUnitOffset"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainNull" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainOnlyDigits" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AtomicStampedReferenceAssert" -> "org.assertj.core.api.AbstractAtomicReferenceAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeInSameSecondWindow" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveNoSuppressedExceptions" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotBeBlank" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.util.DoubleComparator" -> "org.assertj.core.util.NullSafeComparator"[arrowhead = onormal];
"org.assertj.core.internal.Numbers" -> "org.assertj.core.internal.Comparables"[arrowhead = onormal];
"org.assertj.core.api.SoftAssertionPredicateAssert" -> "org.assertj.core.api.AbstractPredicateAssert"[arrowhead = onormal];
"org.assertj.core.api.AbstractOffsetDateTimeAssert" -> "org.assertj.core.api.AbstractTemporalAssert"[arrowhead = onormal];
"org.assertj.core.api.CharacterAssert" -> "org.assertj.core.api.AbstractCharacterAssert"[arrowhead = onormal];
"org.assertj.core.api.Java6AbstractBDDSoftAssertions" -> "org.assertj.core.api.AbstractSoftAssertions"[arrowhead = onormal];
"org.assertj.core.presentation.BinaryRepresentation" -> "org.assertj.core.presentation.StandardRepresentation"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotBeSame" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractFloatAssert" -> "org.assertj.core.api.AbstractComparableAssert"[arrowhead = onormal];
"org.assertj.core.api.AbstractPredicateLikeAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.api.ShortAssert" -> "org.assertj.core.api.AbstractShortAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainKeys" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveSameTime" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldOnlyHaveElementsOfTypes" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeSubsetOf" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeExactlyInstanceOf" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.internal.Integers" -> "org.assertj.core.internal.Numbers"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeUpperCase" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainCharSequenceSequence" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.internal.ComparatorBasedComparisonStrategy" -> "org.assertj.core.internal.AbstractComparisonStrategy"[arrowhead = onormal];
"org.assertj.core.api.filter.InFilter" -> "org.assertj.core.api.filter.FilterOperator"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotContainAtIndex" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractCharacterAssert" -> "org.assertj.core.api.AbstractComparableAssert"[arrowhead = onormal];
"org.assertj.core.api.AbstractCharArrayAssert" -> "org.assertj.core.api.AbstractArrayAssert"[arrowhead = onormal];
"org.assertj.core.api.CharArrayAssert" -> "org.assertj.core.api.AbstractCharArrayAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldMatchPattern" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainOnlyKeys" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeBeforeOrEqualsTo" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotBeOfClassIn" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.ByteAssert" -> "org.assertj.core.api.AbstractByteAssert"[arrowhead = onormal];
"org.assertj.core.error.uri.ShouldHaveScheme" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractLocalDateTimeAssert" -> "org.assertj.core.api.AbstractTemporalAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeEqualByComparingOnlyGivenFields" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveExtension" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.BigIntegerAssert" -> "org.assertj.core.api.AbstractBigIntegerAssert"[arrowhead = onormal];
"org.assertj.core.api.OptionalIntAssert" -> "org.assertj.core.api.AbstractOptionalIntAssert"[arrowhead = onormal];
"org.assertj.core.api.AbstractIterableSizeAssert" -> "org.assertj.core.api.AbstractIntegerAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotBeEqualNormalizingWhitespace" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeWritable" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeDirectory" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeInThePast" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.description.TextDescription" -> "org.assertj.core.description.Description"[arrowhead = onormal];
"org.assertj.core.api.AbstractThrowableAssert" -> "org.assertj.core.api.AbstractObjectAssert"[arrowhead = onormal];
"org.assertj.core.internal.Floats" -> "org.assertj.core.internal.RealNumbers"[arrowhead = onormal];
"org.assertj.core.api.Java6JUnitBDDSoftAssertions" -> "org.assertj.core.api.Java6AbstractBDDSoftAssertions"[arrowhead = onormal];
"org.assertj.core.api.BooleanAssert" -> "org.assertj.core.api.AbstractBooleanAssert"[arrowhead = onormal];
"org.assertj.core.api.AbstractCompletableFutureAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.api.ClassAssert" -> "org.assertj.core.api.AbstractClassAssert"[arrowhead = onormal];
"org.assertj.core.error.future.ShouldNotBeCompletedExceptionally" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeAfter" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ElementsShouldBeAtLeast" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeInSameMinuteWindow" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.internal.BigIntegers" -> "org.assertj.core.internal.Numbers"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotBeExactlyInstanceOf" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ElementsShouldNotHave" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractBDDSoftAssertions" -> "org.assertj.core.api.Java6AbstractBDDSoftAssertions"[arrowhead = onormal];
"org.assertj.core.error.ShouldHavePropertyOrFieldWithValue" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveParent" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotExist" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.NoElementsShouldMatch" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.internal.Shorts" -> "org.assertj.core.internal.Numbers"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainSequence" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractFloatArrayAssert" -> "org.assertj.core.api.AbstractArrayAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeAbsolutePath" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.FactoryBasedNavigableListAssert" -> "org.assertj.core.api.AbstractListAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveValue" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractByteArrayAssert" -> "org.assertj.core.api.AbstractArrayAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldHave" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotBeBetween" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.MapSizeAssert" -> "org.assertj.core.api.AbstractMapSizeAssert"[arrowhead = onormal];
"org.assertj.core.api.AtomicBooleanAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotBeEqualIgnoringCase" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractBooleanAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotBeInstanceOfAny" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeInTheFuture" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.internal.AtomicReferenceArrayElementComparisonStrategy" -> "org.assertj.core.internal.StandardComparisonStrategy"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotHaveThrown" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotHaveAnyElementsOfTypes" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotContainNull" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeEqualIgnoringHours" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractDoubleArrayAssert" -> "org.assertj.core.api.AbstractArrayAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainKey" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeInSameDay" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AtomicLongArrayAssert" -> "org.assertj.core.api.AbstractEnumerableAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldExist" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.uri.ShouldHaveAuthority" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainCharSequenceOnlyOnce" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.IntArrayAssert" -> "org.assertj.core.api.AbstractIntArrayAssert"[arrowhead = onormal];
"org.assertj.core.api.AtomicLongFieldUpdaterAssert" -> "org.assertj.core.api.AbstractAtomicFieldUpdaterAssert"[arrowhead = onormal];
"org.assertj.core.api.LongArrayAssert" -> "org.assertj.core.api.AbstractLongArrayAssert"[arrowhead = onormal];
"org.assertj.core.api.SoftAssertionClassAssert" -> "org.assertj.core.api.AbstractClassAssert"[arrowhead = onormal];
"org.assertj.core.api.SoftAssertionMapAssert" -> "org.assertj.core.api.AbstractMapAssert"[arrowhead = onormal];
"org.assertj.core.util.diff.DeleteDelta" -> "org.assertj.core.util.diff.Delta"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeEqualIgnoringWhitespace" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractMapSizeAssert" -> "org.assertj.core.api.AbstractIntegerAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveAnnotations" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.util.diff.InsertDelta" -> "org.assertj.core.util.diff.Delta"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeInSameHour" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeEqualWithinOffset" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.presentation.HexadecimalRepresentation" -> "org.assertj.core.presentation.StandardRepresentation"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeIn" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.FileAssert" -> "org.assertj.core.api.AbstractFileAssert"[arrowhead = onormal];
"org.assertj.core.internal.OnFieldsComparator" -> "org.assertj.core.internal.FieldByFieldComparator"[arrowhead = onormal];
"org.assertj.core.error.ElementsShouldHave" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AtomicReferenceArrayAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainPattern" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ElementsShouldNotBe" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AtomicReferenceFieldUpdaterAssert" -> "org.assertj.core.api.AbstractAtomicFieldUpdaterAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldContainValue" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveNoCause" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.OffsetTimeAssert" -> "org.assertj.core.api.AbstractOffsetTimeAssert"[arrowhead = onormal];
"org.assertj.core.presentation.UnicodeRepresentation" -> "org.assertj.core.presentation.StandardRepresentation"[arrowhead = onormal];
"org.assertj.core.api.BooleanArrayAssert" -> "org.assertj.core.api.AbstractBooleanArrayAssert"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeAfterYear" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotContainValue" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.future.ShouldBeCompleted" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldHaveNoParent" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.OptionalShouldBePresent" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotContainKeys" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeInstance" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldBeEqualIgnoringNewLineDifferences" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.AbstractDoubleAssert" -> "org.assertj.core.api.AbstractComparableAssert"[arrowhead = onormal];
"org.assertj.core.api.AbstractLocalDateAssert" -> "org.assertj.core.api.AbstractTemporalAssert"[arrowhead = onormal];
"org.assertj.core.error.future.ShouldNotBeCancelled" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.JUnitBDDSoftAssertions" -> "org.assertj.core.api.AbstractBDDSoftAssertions"[arrowhead = onormal];
"org.assertj.core.error.ShouldStartWithPath" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.api.ZonedDateTimeAssert" -> "org.assertj.core.api.AbstractZonedDateTimeAssert"[arrowhead = onormal];
"org.assertj.core.condition.Not" -> "org.assertj.core.condition.Negative"[arrowhead = onormal];
"org.assertj.core.condition.AllOf" -> "org.assertj.core.condition.Join"[arrowhead = onormal];
"org.assertj.core.error.ShouldNotBeNull" -> "org.assertj.core.error.BasicErrorMessageFactory"[arrowhead = onormal];
"org.assertj.core.error.ShouldOnlyHaveFields$ErrorType" -> "org.assertj.core.error.ShouldOnlyHaveFields$ErrorType"[arrowhead = diamond];
"org.assertj.core.internal.Dates" -> "org.assertj.core.internal.ComparisonStrategy"[arrowhead = diamond];
"org.assertj.core.internal.Dates" -> "org.assertj.core.internal.Dates"[arrowhead = diamond];
"org.assertj.core.internal.Dates" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.description.EmptyTextDescription" -> "org.assertj.core.description.Description"[arrowhead = diamond];
"org.assertj.core.api.AbstractShortAssert" -> "org.assertj.core.internal.Shorts"[arrowhead = diamond];
"org.assertj.core.groups.Properties" -> "org.assertj.core.util.introspection.PropertySupport"[arrowhead = diamond];
"org.assertj.core.internal.Files" -> "org.assertj.core.internal.Files"[arrowhead = diamond];
"org.assertj.core.internal.Files" -> "org.assertj.core.internal.Diff"[arrowhead = diamond];
"org.assertj.core.internal.Files" -> "org.assertj.core.internal.BinaryDiff"[arrowhead = diamond];
"org.assertj.core.internal.Files" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.internal.Objects" -> "org.assertj.core.internal.Objects"[arrowhead = diamond];
"org.assertj.core.internal.Objects" -> "org.assertj.core.internal.ComparisonStrategy"[arrowhead = diamond];
"org.assertj.core.internal.Objects" -> "org.assertj.core.util.introspection.PropertySupport"[arrowhead = diamond];
"org.assertj.core.internal.Objects" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.internal.Objects" -> "org.assertj.core.util.introspection.FieldSupport"[arrowhead = diamond];
"org.assertj.core.api.AbstractBigIntegerAssert" -> "org.assertj.core.internal.BigIntegers"[arrowhead = diamond];
"org.assertj.core.util.introspection.PropertyOrFieldSupport" -> "org.assertj.core.util.introspection.PropertyOrFieldSupport"[arrowhead = diamond];
"org.assertj.core.util.introspection.PropertyOrFieldSupport" -> "org.assertj.core.util.introspection.PropertySupport"[arrowhead = diamond];
"org.assertj.core.util.introspection.PropertyOrFieldSupport" -> "org.assertj.core.util.introspection.FieldSupport"[arrowhead = diamond];
"org.assertj.core.internal.RecursiveFieldByFieldComparator" -> "org.assertj.core.internal.TypeComparators"[arrowhead = diamond];
"org.assertj.core.internal.ByteArrays" -> "org.assertj.core.internal.ByteArrays"[arrowhead = diamond];
"org.assertj.core.internal.ByteArrays" -> "org.assertj.core.internal.Arrays"[arrowhead = diamond];
"org.assertj.core.internal.ByteArrays" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.error.ShouldContainOnlyNulls$ErrorType" -> "org.assertj.core.error.ShouldContainOnlyNulls$ErrorType"[arrowhead = diamond];
"org.assertj.core.internal.Failures" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.util.BigDecimalComparator" -> "org.assertj.core.util.BigDecimalComparator"[arrowhead = diamond];
"org.assertj.core.internal.Urls" -> "org.assertj.core.internal.Urls"[arrowhead = diamond];
"org.assertj.core.internal.Urls" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.configuration.ConfigurationProvider" -> "org.assertj.core.presentation.Representation"[arrowhead = diamond];
"org.assertj.core.configuration.ConfigurationProvider" -> "org.assertj.core.configuration.ConfigurationProvider"[arrowhead = diamond];
"org.assertj.core.error.MessageFormatter" -> "org.assertj.core.error.MessageFormatter"[arrowhead = diamond];
"org.assertj.core.error.MessageFormatter" -> "org.assertj.core.error.DescriptionFormatter"[arrowhead = diamond];
"org.assertj.core.api.AbstractMapAssert" -> "org.assertj.core.internal.Maps"[arrowhead = diamond];
"org.assertj.core.util.introspection.FieldSupport" -> "org.assertj.core.util.introspection.FieldSupport"[arrowhead = diamond];
"org.assertj.core.internal.Conditions" -> "org.assertj.core.internal.Conditions"[arrowhead = diamond];
"org.assertj.core.internal.Conditions" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.internal.DoubleArrays" -> "org.assertj.core.internal.DoubleArrays"[arrowhead = diamond];
"org.assertj.core.internal.DoubleArrays" -> "org.assertj.core.internal.Arrays"[arrowhead = diamond];
"org.assertj.core.internal.DoubleArrays" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.internal.ShortArrays" -> "org.assertj.core.internal.ShortArrays"[arrowhead = diamond];
"org.assertj.core.internal.ShortArrays" -> "org.assertj.core.internal.Arrays"[arrowhead = diamond];
"org.assertj.core.internal.ShortArrays" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.internal.BigDecimals" -> "org.assertj.core.internal.BigDecimals"[arrowhead = diamond];
"org.assertj.core.api.AbstractPredicateAssert" -> "org.assertj.core.internal.Iterables"[arrowhead = diamond];
"org.assertj.core.util.diff.Delta$TYPE" -> "org.assertj.core.util.diff.Delta$TYPE"[arrowhead = diamond];
"org.assertj.core.api.AbstractIntArrayAssert" -> "org.assertj.core.internal.IntArrays"[arrowhead = diamond];
"org.assertj.core.internal.StandardComparisonStrategy" -> "org.assertj.core.internal.StandardComparisonStrategy"[arrowhead = diamond];
"org.assertj.core.api.AbstractObjectArrayAssert" -> "org.assertj.core.internal.Iterables"[arrowhead = diamond];
"org.assertj.core.api.AbstractObjectArrayAssert" -> "org.assertj.core.internal.TypeComparators"[arrowhead = diamond];
"org.assertj.core.api.AbstractObjectArrayAssert" -> "org.assertj.core.internal.ObjectArrays"[arrowhead = diamond];
"org.assertj.core.api.FactoryBasedNavigableIterableAssert" -> "org.assertj.core.api.AssertFactory"[arrowhead = diamond];
"org.assertj.core.presentation.PredicateDescription" -> "org.assertj.core.presentation.PredicateDescription"[arrowhead = diamond];
"org.assertj.core.api.AbstractFutureAssert" -> "org.assertj.core.internal.Futures"[arrowhead = diamond];
"org.assertj.core.api.AbstractIntegerAssert" -> "org.assertj.core.internal.Integers"[arrowhead = diamond];
"org.assertj.core.api.AbstractPathAssert" -> "org.assertj.core.internal.Paths"[arrowhead = diamond];
"org.assertj.core.error.DescriptionFormatter" -> "org.assertj.core.error.DescriptionFormatter"[arrowhead = diamond];
"org.assertj.core.internal.Arrays" -> "org.assertj.core.internal.ComparisonStrategy"[arrowhead = diamond];
"org.assertj.core.internal.Arrays" -> "org.assertj.core.internal.Arrays"[arrowhead = diamond];
"org.assertj.core.internal.Doubles" -> "org.assertj.core.internal.Doubles"[arrowhead = diamond];
"org.assertj.core.api.AbstractOptionalAssert" -> "org.assertj.core.internal.ComparisonStrategy"[arrowhead = diamond];
"org.assertj.core.api.AbstractIterableAssert" -> "org.assertj.core.internal.Iterables"[arrowhead = diamond];
"org.assertj.core.api.AbstractIterableAssert" -> "org.assertj.core.internal.TypeComparators"[arrowhead = diamond];
"org.assertj.core.api.JUnitBDDSoftAssertions$1" -> "org.assertj.core.api.JUnitBDDSoftAssertions"[arrowhead = diamond];
"org.assertj.core.util.BigIntegerComparator" -> "org.assertj.core.util.BigIntegerComparator"[arrowhead = diamond];
"org.assertj.core.api.ComparatorFactory$2" -> "org.assertj.core.api.ComparatorFactory"[arrowhead = diamond];
"org.assertj.core.api.ComparatorFactory$1" -> "org.assertj.core.api.ComparatorFactory"[arrowhead = diamond];
"org.assertj.core.api.AbstractOptionalIntAssert" -> "org.assertj.core.internal.Integers"[arrowhead = diamond];
"org.assertj.core.api.Java6JUnitSoftAssertions$1" -> "org.assertj.core.api.Java6JUnitSoftAssertions"[arrowhead = diamond];
"org.assertj.core.internal.ExtendedByTypesComparator" -> "org.assertj.core.internal.TypeComparators"[arrowhead = diamond];
"org.assertj.core.internal.Futures" -> "org.assertj.core.internal.Futures"[arrowhead = diamond];
"org.assertj.core.internal.Futures" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.error.ShouldContainExactlyInAnyOrder$ErrorType" -> "org.assertj.core.error.ShouldContainExactlyInAnyOrder$ErrorType"[arrowhead = diamond];
"org.assertj.core.api.filter.Filters" -> "org.assertj.core.util.introspection.PropertyOrFieldSupport"[arrowhead = diamond];
"org.assertj.core.api.WritableAssertionInfo" -> "org.assertj.core.presentation.Representation"[arrowhead = diamond];
"org.assertj.core.api.WritableAssertionInfo" -> "org.assertj.core.description.Description"[arrowhead = diamond];
"org.assertj.core.internal.IterableDiff" -> "org.assertj.core.internal.ComparisonStrategy"[arrowhead = diamond];
"org.assertj.core.api.AbstractListAssert" -> "org.assertj.core.internal.Lists"[arrowhead = diamond];
"org.assertj.core.api.Java6JUnitBDDSoftAssertions$1" -> "org.assertj.core.api.Java6JUnitBDDSoftAssertions"[arrowhead = diamond];
"org.assertj.core.api.AtomicLongAssert" -> "org.assertj.core.internal.Longs"[arrowhead = diamond];
"org.assertj.core.api.AtomicLongAssert" -> "org.assertj.core.internal.Comparables"[arrowhead = diamond];
"org.assertj.core.internal.Strings" -> "org.assertj.core.internal.Strings"[arrowhead = diamond];
"org.assertj.core.internal.Strings" -> "org.assertj.core.internal.ComparisonStrategy"[arrowhead = diamond];
"org.assertj.core.internal.Strings" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.internal.Longs" -> "org.assertj.core.internal.Longs"[arrowhead = diamond];
"org.assertj.core.api.AbstractAssert" -> "org.assertj.core.presentation.Representation"[arrowhead = diamond];
"org.assertj.core.api.AbstractAssert" -> "org.assertj.core.api.WritableAssertionInfo"[arrowhead = diamond];
"org.assertj.core.api.AbstractAssert" -> "org.assertj.core.internal.Conditions"[arrowhead = diamond];
"org.assertj.core.api.AbstractAssert" -> "org.assertj.core.internal.Objects"[arrowhead = diamond];
"org.assertj.core.api.AbstractAssert" -> "org.assertj.core.api.AbstractAssert"[arrowhead = diamond];
"org.assertj.core.api.ThrowableAssertAlternative" -> "org.assertj.core.api.ThrowableAssert"[arrowhead = diamond];
"org.assertj.core.internal.LongArrays" -> "org.assertj.core.internal.LongArrays"[arrowhead = diamond];
"org.assertj.core.internal.LongArrays" -> "org.assertj.core.internal.Arrays"[arrowhead = diamond];
"org.assertj.core.internal.LongArrays" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.api.AbstractComparableAssert" -> "org.assertj.core.internal.Comparables"[arrowhead = diamond];
"org.assertj.core.api.AbstractLongArrayAssert" -> "org.assertj.core.internal.LongArrays"[arrowhead = diamond];
"org.assertj.core.api.AbstractTemporalAssert" -> "org.assertj.core.internal.Comparables"[arrowhead = diamond];
"org.assertj.core.util.TextFileWriter" -> "org.assertj.core.util.TextFileWriter"[arrowhead = diamond];
"org.assertj.core.error.ShouldContainOnly$ErrorType" -> "org.assertj.core.error.ShouldContainOnly$ErrorType"[arrowhead = diamond];
"org.assertj.core.util.diff.Delta" -> "org.assertj.core.util.diff.Chunk"[arrowhead = diamond];
"org.assertj.core.internal.Comparables" -> "org.assertj.core.internal.ComparisonStrategy"[arrowhead = diamond];
"org.assertj.core.internal.Comparables" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.internal.Comparables" -> "org.assertj.core.internal.Comparables"[arrowhead = diamond];
"org.assertj.core.internal.Uris" -> "org.assertj.core.internal.Uris"[arrowhead = diamond];
"org.assertj.core.internal.Uris" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.internal.FieldByFieldComparator" -> "org.assertj.core.internal.TypeComparators"[arrowhead = diamond];
"org.assertj.core.internal.StandardComparisonStrategy$1" -> "org.assertj.core.internal.StandardComparisonStrategy"[arrowhead = diamond];
"org.assertj.core.api.AbstractBooleanArrayAssert" -> "org.assertj.core.internal.BooleanArrays"[arrowhead = diamond];
"org.assertj.core.condition.Negative" -> "org.assertj.core.api.Condition"[arrowhead = diamond];
"org.assertj.core.api.AbstractObjectAssert" -> "org.assertj.core.internal.TypeComparators"[arrowhead = diamond];
"org.assertj.core.internal.CharArrays" -> "org.assertj.core.internal.Arrays"[arrowhead = diamond];
"org.assertj.core.internal.CharArrays" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.internal.CharArrays" -> "org.assertj.core.internal.CharArrays"[arrowhead = diamond];
"org.assertj.core.internal.Characters" -> "org.assertj.core.internal.Characters"[arrowhead = diamond];
"org.assertj.core.api.AbstractShortArrayAssert" -> "org.assertj.core.internal.ShortArrays"[arrowhead = diamond];
"org.assertj.core.api.AbstractBigDecimalAssert" -> "org.assertj.core.internal.BigDecimals"[arrowhead = diamond];
"org.assertj.core.api.SoftAssertionError" -> "org.assertj.core.error.MessageFormatter"[arrowhead = diamond];
"org.assertj.core.internal.Bytes" -> "org.assertj.core.internal.Bytes"[arrowhead = diamond];
"org.assertj.core.api.AbstractInputStreamAssert" -> "org.assertj.core.internal.InputStreams"[arrowhead = diamond];
"org.assertj.core.internal.InputStreams" -> "org.assertj.core.internal.InputStreams"[arrowhead = diamond];
"org.assertj.core.internal.InputStreams" -> "org.assertj.core.internal.Diff"[arrowhead = diamond];
"org.assertj.core.internal.InputStreams" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.api.AtomicIntegerAssert" -> "org.assertj.core.internal.Integers"[arrowhead = diamond];
"org.assertj.core.api.AtomicIntegerAssert" -> "org.assertj.core.internal.Comparables"[arrowhead = diamond];
"org.assertj.core.api.AbstractOptionalDoubleAssert" -> "org.assertj.core.internal.Doubles"[arrowhead = diamond];
"org.assertj.core.util.diff.myers.MyersDiff" -> "org.assertj.core.util.diff.myers.Equalizer"[arrowhead = diamond];
"org.assertj.core.api.AbstractByteAssert" -> "org.assertj.core.internal.Bytes"[arrowhead = diamond];
"org.assertj.core.error.ShouldBeEqual" -> "org.assertj.core.presentation.Representation"[arrowhead = diamond];
"org.assertj.core.error.ShouldBeEqual" -> "org.assertj.core.error.ConstructorInvoker"[arrowhead = diamond];
"org.assertj.core.error.ShouldBeEqual" -> "org.assertj.core.internal.ComparisonStrategy"[arrowhead = diamond];
"org.assertj.core.error.ShouldBeEqual" -> "org.assertj.core.error.MessageFormatter"[arrowhead = diamond];
"org.assertj.core.error.ShouldBeEqual" -> "org.assertj.core.error.DescriptionFormatter"[arrowhead = diamond];
"org.assertj.core.api.AbstractCharSequenceAssert" -> "org.assertj.core.internal.Strings"[arrowhead = diamond];
"org.assertj.core.internal.NioFilesWrapper" -> "org.assertj.core.internal.NioFilesWrapper"[arrowhead = diamond];
"org.assertj.core.api.AbstractDateAssert" -> "org.assertj.core.internal.Dates"[arrowhead = diamond];
"org.assertj.core.api.AtomicIntegerArrayAssert" -> "org.assertj.core.internal.IntArrays"[arrowhead = diamond];
"org.assertj.core.api.AbstractClassAssert" -> "org.assertj.core.internal.Classes"[arrowhead = diamond];
"org.assertj.core.api.AbstractUriAssert" -> "org.assertj.core.internal.Uris"[arrowhead = diamond];
"org.assertj.core.api.AbstractFileAssert" -> "org.assertj.core.internal.Files"[arrowhead = diamond];
"org.assertj.core.api.AbstractLongAssert" -> "org.assertj.core.internal.Longs"[arrowhead = diamond];
"org.assertj.core.api.Condition" -> "org.assertj.core.description.Description"[arrowhead = diamond];
"org.assertj.core.internal.Iterables" -> "org.assertj.core.internal.Iterables"[arrowhead = diamond];
"org.assertj.core.internal.Iterables" -> "org.assertj.core.internal.Conditions"[arrowhead = diamond];
"org.assertj.core.internal.Iterables" -> "org.assertj.core.internal.ComparisonStrategy"[arrowhead = diamond];
"org.assertj.core.internal.Iterables" -> "org.assertj.core.internal.Predicates"[arrowhead = diamond];
"org.assertj.core.internal.Iterables" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.api.IterableSizeAssert" -> "org.assertj.core.api.AbstractIterableAssert"[arrowhead = diamond];
"org.assertj.core.api.AbstractUrlAssert" -> "org.assertj.core.internal.Urls"[arrowhead = diamond];
"org.assertj.core.error.ShouldNotBeEmpty" -> "org.assertj.core.error.ShouldNotBeEmpty"[arrowhead = diamond];
"org.assertj.core.presentation.BinaryRepresentation" -> "org.assertj.core.presentation.BinaryRepresentation"[arrowhead = diamond];
"org.assertj.core.api.AbstractFloatAssert" -> "org.assertj.core.internal.Floats"[arrowhead = diamond];
"org.assertj.core.internal.Paths" -> "org.assertj.core.internal.Paths"[arrowhead = diamond];
"org.assertj.core.internal.Paths" -> "org.assertj.core.internal.Diff"[arrowhead = diamond];
"org.assertj.core.internal.Paths" -> "org.assertj.core.internal.BinaryDiff"[arrowhead = diamond];
"org.assertj.core.internal.Paths" -> "org.assertj.core.internal.NioFilesWrapper"[arrowhead = diamond];
"org.assertj.core.internal.Paths" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.api.AbstractPredicateLikeAssert" -> "org.assertj.core.internal.Iterables"[arrowhead = diamond];
"org.assertj.core.internal.Booleans" -> "org.assertj.core.internal.Booleans"[arrowhead = diamond];
"org.assertj.core.internal.Booleans" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.internal.Integers" -> "org.assertj.core.internal.Integers"[arrowhead = diamond];
"org.assertj.core.api.AbstractCharacterAssert" -> "org.assertj.core.internal.Characters"[arrowhead = diamond];
"org.assertj.core.api.AbstractCharArrayAssert" -> "org.assertj.core.internal.CharArrays"[arrowhead = diamond];
"org.assertj.core.util.diff.myers.PathNode" -> "org.assertj.core.util.diff.myers.PathNode"[arrowhead = diamond];
"org.assertj.core.error.BasicErrorMessageFactory" -> "org.assertj.core.error.MessageFormatter"[arrowhead = diamond];
"org.assertj.core.api.AbstractThrowableAssert" -> "org.assertj.core.internal.Throwables"[arrowhead = diamond];
"org.assertj.core.internal.Floats" -> "org.assertj.core.internal.Floats"[arrowhead = diamond];
"org.assertj.core.api.JUnitSoftAssertions$1" -> "org.assertj.core.api.JUnitSoftAssertions"[arrowhead = diamond];
"org.assertj.core.internal.BigIntegers" -> "org.assertj.core.internal.BigIntegers"[arrowhead = diamond];
"org.assertj.core.internal.FloatArrays" -> "org.assertj.core.internal.FloatArrays"[arrowhead = diamond];
"org.assertj.core.internal.FloatArrays" -> "org.assertj.core.internal.Arrays"[arrowhead = diamond];
"org.assertj.core.internal.FloatArrays" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.internal.Classes" -> "org.assertj.core.internal.ComparisonStrategy"[arrowhead = diamond];
"org.assertj.core.internal.Classes" -> "org.assertj.core.internal.Classes"[arrowhead = diamond];
"org.assertj.core.internal.Classes" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.internal.IntArrays" -> "org.assertj.core.internal.IntArrays"[arrowhead = diamond];
"org.assertj.core.internal.IntArrays" -> "org.assertj.core.internal.Arrays"[arrowhead = diamond];
"org.assertj.core.internal.IntArrays" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.api.ComparatorFactory" -> "org.assertj.core.api.ComparatorFactory"[arrowhead = diamond];
"org.assertj.core.internal.Shorts" -> "org.assertj.core.internal.Shorts"[arrowhead = diamond];
"org.assertj.core.util.introspection.PropertySupport" -> "org.assertj.core.util.introspection.PropertySupport"[arrowhead = diamond];
"org.assertj.core.api.AbstractFloatArrayAssert" -> "org.assertj.core.internal.FloatArrays"[arrowhead = diamond];
"org.assertj.core.api.AbstractFloatArrayAssert" -> "org.assertj.core.api.ComparatorFactory"[arrowhead = diamond];
"org.assertj.core.internal.CommonValidations" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.api.FactoryBasedNavigableListAssert" -> "org.assertj.core.api.AssertFactory"[arrowhead = diamond];
"org.assertj.core.api.AbstractByteArrayAssert" -> "org.assertj.core.internal.ByteArrays"[arrowhead = diamond];
"org.assertj.core.api.MapSizeAssert" -> "org.assertj.core.api.AbstractMapAssert"[arrowhead = diamond];
"org.assertj.core.api.AtomicBooleanAssert" -> "org.assertj.core.internal.Booleans"[arrowhead = diamond];
"org.assertj.core.api.AbstractBooleanAssert" -> "org.assertj.core.internal.Booleans"[arrowhead = diamond];
"org.assertj.core.internal.Lists" -> "org.assertj.core.internal.ComparisonStrategy"[arrowhead = diamond];
"org.assertj.core.internal.Lists" -> "org.assertj.core.internal.Lists"[arrowhead = diamond];
"org.assertj.core.internal.Lists" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.api.AbstractDoubleArrayAssert" -> "org.assertj.core.internal.DoubleArrays"[arrowhead = diamond];
"org.assertj.core.api.AbstractDoubleArrayAssert" -> "org.assertj.core.api.ComparatorFactory"[arrowhead = diamond];
"org.assertj.core.api.AtomicLongArrayAssert" -> "org.assertj.core.internal.LongArrays"[arrowhead = diamond];
"org.assertj.core.presentation.StandardRepresentation" -> "org.assertj.core.presentation.StandardRepresentation"[arrowhead = diamond];
"org.assertj.core.internal.Predicates" -> "org.assertj.core.internal.Predicates"[arrowhead = diamond];
"org.assertj.core.internal.Predicates" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.internal.ObjectArrays" -> "org.assertj.core.internal.Conditions"[arrowhead = diamond];
"org.assertj.core.internal.ObjectArrays" -> "org.assertj.core.internal.ObjectArrays"[arrowhead = diamond];
"org.assertj.core.internal.ObjectArrays" -> "org.assertj.core.internal.Arrays"[arrowhead = diamond];
"org.assertj.core.internal.ObjectArrays" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.internal.Throwables" -> "org.assertj.core.internal.Throwables"[arrowhead = diamond];
"org.assertj.core.internal.Throwables" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.presentation.HexadecimalRepresentation" -> "org.assertj.core.presentation.HexadecimalRepresentation"[arrowhead = diamond];
"org.assertj.core.internal.Maps" -> "org.assertj.core.internal.Conditions"[arrowhead = diamond];
"org.assertj.core.internal.Maps" -> "org.assertj.core.internal.Maps"[arrowhead = diamond];
"org.assertj.core.internal.Maps" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.util.diff.myers.MyersDiff$1" -> "org.assertj.core.util.diff.myers.MyersDiff"[arrowhead = diamond];
"org.assertj.core.api.AtomicReferenceArrayAssert" -> "org.assertj.core.internal.Iterables"[arrowhead = diamond];
"org.assertj.core.api.AtomicReferenceArrayAssert" -> "org.assertj.core.internal.TypeComparators"[arrowhead = diamond];
"org.assertj.core.api.AtomicReferenceArrayAssert" -> "org.assertj.core.internal.ObjectArrays"[arrowhead = diamond];
"org.assertj.core.presentation.UnicodeRepresentation" -> "org.assertj.core.presentation.UnicodeRepresentation"[arrowhead = diamond];
"org.assertj.core.api.AbstractDoubleAssert" -> "org.assertj.core.internal.Doubles"[arrowhead = diamond];
"org.assertj.core.api.ThrowableTypeAssert" -> "org.assertj.core.description.Description"[arrowhead = diamond];
"org.assertj.core.internal.BooleanArrays" -> "org.assertj.core.internal.BooleanArrays"[arrowhead = diamond];
"org.assertj.core.internal.BooleanArrays" -> "org.assertj.core.internal.Arrays"[arrowhead = diamond];
"org.assertj.core.internal.BooleanArrays" -> "org.assertj.core.internal.Failures"[arrowhead = diamond];
"org.assertj.core.error.ShouldNotBeNull" -> "org.assertj.core.error.ShouldNotBeNull"[arrowhead = diamond];
"org.assertj.core.error.ShouldNotMatchPattern"[shape = box];
"org.assertj.core.internal.ShortArrays"[shape = box];
"org.assertj.core.api.AbstractStandardSoftAssertions"[shape = box];
"org.assertj.core.error.ShouldBeInSameHour"[shape = box];
"org.assertj.core.util.Throwables"[shape = box];
"org.assertj.core.error.ShouldContainPattern"[shape = box];
"org.assertj.core.error.ShouldBeFile"[shape = box];
"org.assertj.core.error.ShouldBeEqualWithinOffset"[shape = box];
"org.assertj.core.internal.ComparisonStrategy"[shape = box];
"org.assertj.core.api.LongPredicateAssert"[shape = box];
"org.assertj.core.api.AbstractThrowableAssert"[shape = box];
"org.assertj.core.internal.Bytes"[shape = box];
"org.assertj.core.error.ShouldHaveNoNullFields"[shape = box];
"org.assertj.core.api.BigDecimalAssert"[shape = box];
"org.assertj.core.error.BasicErrorMessageFactory$UnquotedString"[shape = box];
"org.assertj.core.internal.BigIntegers"[shape = box];
"org.assertj.core.error.ShouldBeInSameYear"[shape = box];
"org.assertj.core.error.OptionalDoubleShouldHaveValueCloseTo"[shape = box];
"org.assertj.core.internal.Longs"[shape = box];
"org.assertj.core.internal.StandardComparisonStrategy"[shape = box];
"org.assertj.core.internal.DeepDifference"[shape = box];
"org.assertj.core.util.DoubleComparator"[shape = box];
"org.assertj.core.api.AbstractUriAssert"[shape = box];
"org.assertj.core.configuration.Services"[shape = box];
"org.assertj.core.error.ShouldContainAtIndex"[shape = box];
"org.assertj.core.api.HamcrestCondition"[shape = box];
"org.assertj.core.api.InstantAssert"[shape = box];
"org.assertj.core.api.CharSequenceAssert"[shape = box];
"org.assertj.core.error.ElementsShouldBeAtMost"[shape = box];
"org.assertj.core.internal.Comparables"[shape = box];
"org.assertj.core.util.BigIntegerComparator"[shape = box];
"org.assertj.core.error.ShouldBeAfterYear"[shape = box];
"org.assertj.core.error.ShouldHaveCauseExactlyInstance"[shape = box];
"org.assertj.core.error.ShouldNotExist"[shape = box];
"org.assertj.core.error.ShouldBeBlank"[shape = box];
"org.assertj.core.util.introspection.ClassUtils"[shape = box];
"org.assertj.core.error.ElementsShouldBeAtLeast"[shape = box];
"org.assertj.core.error.ShouldHaveValue"[shape = box];
"org.assertj.core.api.MapAssert"[shape = box];
"org.assertj.core.error.ShouldHavePropertyOrFieldWithValue"[shape = box];
"org.assertj.core.error.ShouldHaveName"[shape = box];
"org.assertj.core.api.AtomicStampedReferenceAssert"[shape = box];
"org.assertj.core.error.ShouldNotBeBlank"[shape = box];
"org.assertj.core.error.ShouldHaveStamp"[shape = box];
"org.assertj.core.api.exception.RuntimeIOException"[shape = box];
"org.assertj.core.api.ErrorCollector$LastResult"[shape = box];
"org.assertj.core.error.future.ShouldNotBeDone"[shape = box];
"org.assertj.core.api.AbstractIterableSizeAssert"[shape = box];
"org.assertj.core.error.ShouldNotBeNull"[shape = box];
"org.assertj.core.util.introspection.PropertySupport"[shape = box];
"org.assertj.core.error.ShouldNotEndWith"[shape = box];
"org.assertj.core.error.ShouldContainNull"[shape = box];
"org.assertj.core.api.AbstractAtomicReferenceAssert"[shape = box];
"org.assertj.core.util.FloatComparator"[shape = box];
"org.assertj.core.util.diff.DiffUtils"[shape = box];
"org.assertj.core.util.introspection.MethodSupport"[shape = box];
"org.assertj.core.error.ShouldBe"[shape = box];
"org.assertj.core.util.Strings$StringToAppend"[shape = box];
"org.assertj.core.api.LongArrayAssert"[shape = box];
"org.assertj.core.api.AbstractObjectArrayAssert"[shape = box];
"org.assertj.core.data.Offset"[shape = box];
"org.assertj.core.error.ShouldEndWith"[shape = box];
"org.assertj.core.api.OptionalLongAssert"[shape = box];
"org.assertj.core.error.ShouldBeEqualWithinPercentage"[shape = box];
"org.assertj.core.util.Files"[shape = box];
"org.assertj.core.internal.Characters"[shape = box];
"org.assertj.core.internal.ObjectArrays"[shape = box];
"org.assertj.core.error.ShouldHaveSameClass"[shape = box];
"org.assertj.core.error.ShouldBeGreaterOrEqual"[shape = box];
"org.assertj.core.util.introspection.FieldUtils"[shape = box];
"org.assertj.core.util.diff.Delta$TYPE"[shape = box];
"org.assertj.core.error.ShouldHaveSameHashCode"[shape = box];
"org.assertj.core.util.diff.myers.PathNode"[shape = box];
"org.assertj.core.presentation.StandardRepresentation"[shape = box];
"org.assertj.core.error.ShouldContainEntry"[shape = box];
"org.assertj.core.internal.Objects"[shape = box];
"org.assertj.core.util.introspection.FieldSupport"[shape = box];
"org.assertj.core.util.introspection.MemberUtils"[shape = box];
"org.assertj.core.internal.Predicates"[shape = box];
"org.assertj.core.api.AbstractIterableAssert"[shape = box];
"org.assertj.core.error.ShouldNotBeSame"[shape = box];
"org.assertj.core.api.FutureAssert"[shape = box];
"org.assertj.core.error.ShouldNotStartWith"[shape = box];
"org.assertj.core.api.AtomicReferenceFieldUpdaterAssert"[shape = box];
"org.assertj.core.api.AbstractTemporalAssert"[shape = box];
"org.assertj.core.api.JUnitSoftAssertions$1"[shape = box];
"org.assertj.core.error.ShouldContainsOnlyOnce"[shape = box];
"org.assertj.core.error.ShouldBeToday"[shape = box];
"org.assertj.core.api.AtomicMarkableReferenceAssert"[shape = box];
"org.assertj.core.api.AbstractZonedDateTimeAssert"[shape = box];
"org.assertj.core.util.URLs"[shape = box];
"org.assertj.core.error.ShouldStartWithPath"[shape = box];
"org.assertj.core.util.introspection.IntrospectionError"[shape = box];
"org.assertj.core.internal.Iterables"[shape = box];
"org.assertj.core.api.FloatAssert"[shape = box];
"org.assertj.core.util.diff.ChangeDelta"[shape = box];
"org.assertj.core.presentation.PredicateDescription"[shape = box];
"org.assertj.core.error.ShouldBeEqualIgnoringSeconds"[shape = box];
"org.assertj.core.api.exception.PathsException"[shape = box];
"org.assertj.core.error.ShouldBeAfterOrEqualsTo"[shape = box];
"org.assertj.core.error.ShouldBeBetween"[shape = box];
"org.assertj.core.api.OffsetTimeAssert"[shape = box];
"org.assertj.core.api.AbstractMapSizeAssert"[shape = box];
"org.assertj.core.error.ShouldHaveTime"[shape = box];
"org.assertj.core.error.ShouldNotContainKeys"[shape = box];
"org.assertj.core.error.ShouldNotBeEqualIgnoringWhitespace"[shape = box];
"org.assertj.core.api.SoftAssertionPredicateAssert"[shape = box];
"org.assertj.core.error.ShouldBeBefore"[shape = box];
"org.assertj.core.util.Objects"[shape = box];
"org.assertj.core.api.AssertFactory"[shape = box];
"org.assertj.core.groups.Tuple"[shape = box];
"org.assertj.core.api.AbstractOptionalIntAssert"[shape = box];
"org.assertj.core.api.WritableAssertionInfo"[shape = box];
"org.assertj.core.util.diff.myers.Snake"[shape = box];
"org.assertj.core.internal.IgnoringFieldsComparator"[shape = box];
"org.assertj.core.util.xml.XmlStringPrettyFormatter"[shape = box];
"org.assertj.core.error.ShouldBeAtIndex"[shape = box];
"org.assertj.core.extractor.ByNameMultipleExtractor"[shape = box];
"org.assertj.core.internal.Arrays"[shape = box];
"org.assertj.core.api.AbstractFutureAssert"[shape = box];
"org.assertj.core.error.future.ShouldNotHaveFailed"[shape = box];
"org.assertj.core.error.ElementsShouldNotHave"[shape = box];
"org.assertj.core.error.ShouldNotBeEqualIgnoringCase"[shape = box];
"org.assertj.core.api.Java6JUnitSoftAssertions"[shape = box];
"org.assertj.core.error.ShouldHaveLineCount"[shape = box];
"org.assertj.core.internal.AbstractComparisonStrategy"[shape = box];
"org.assertj.core.api.SoftAssertionListAssert"[shape = box];
"org.assertj.core.data.Index"[shape = box];
"org.assertj.core.api.CompletableFutureAssert"[shape = box];
"org.assertj.core.error.uri.ShouldHaveUserInfo"[shape = box];
"org.assertj.core.api.AbstractBDDSoftAssertions"[shape = box];
"org.assertj.core.error.ShouldBeInstanceOfAny"[shape = box];
"org.assertj.core.internal.Doubles"[shape = box];
"org.assertj.core.condition.DoesNotHave"[shape = box];
"org.assertj.core.internal.InputStreams"[shape = box];
"org.assertj.core.util.AbstractComparableNumberComparator"[shape = box];
"org.assertj.core.api.AbstractUrlAssert"[shape = box];
"org.assertj.core.error.ShouldHaveToString"[shape = box];
"org.assertj.core.error.ElementsShouldHave"[shape = box];
"org.assertj.core.internal.FloatArrays"[shape = box];
"org.assertj.core.util.Hexadecimals"[shape = box];
"org.assertj.core.internal.IntArrays"[shape = box];
"org.assertj.core.internal.Futures"[shape = box];
"org.assertj.core.presentation.HexadecimalRepresentation"[shape = box];
"org.assertj.core.error.future.ShouldBeCancelled"[shape = box];
"org.assertj.core.error.ShouldContainSubsequence"[shape = box];
"org.assertj.core.error.ShouldNotBeEqual"[shape = box];
"org.assertj.core.error.ShouldBeEqualWithTimePrecision"[shape = box];
"org.assertj.core.api.DoubleAssert"[shape = box];
"org.assertj.core.error.ShouldHaveAtLeastOneElementOfType"[shape = box];
"org.assertj.core.api.Java6BDDSoftAssertions"[shape = box];
"org.assertj.core.api.DateAssert"[shape = box];
"org.assertj.core.error.ShouldContainAnyOf"[shape = box];
"org.assertj.core.api.ListAssert$ListFromStream"[shape = box];
"org.assertj.core.api.AtomicLongFieldUpdaterAssert"[shape = box];
"org.assertj.core.error.ShouldNotBeIn"[shape = box];
"org.assertj.core.internal.OnFieldsComparator"[shape = box];
"org.assertj.core.error.future.ShouldNotBeCancelled"[shape = box];
"org.assertj.core.error.ShouldBeIn"[shape = box];
"org.assertj.core.error.ShouldContainValue"[shape = box];
"org.assertj.core.description.TextDescription"[shape = box];
"org.assertj.core.error.ShouldHaveSameTime"[shape = box];
"org.assertj.core.internal.CommonErrors"[shape = box];
"org.assertj.core.api.AbstractInstantAssert"[shape = box];
"org.assertj.core.error.ShouldNotBeEqualWithinPercentage"[shape = box];
"org.assertj.core.condition.Not"[shape = box];
"org.assertj.core.api.AbstractDateAssert"[shape = box];
"org.assertj.core.internal.Floats"[shape = box];
"org.assertj.core.api.AbstractCharArrayAssert"[shape = box];
"org.assertj.core.error.ShouldBeEqualByComparingOnlyGivenFields"[shape = box];
"org.assertj.core.api.AbstractIntegerAssert"[shape = box];
"org.assertj.core.util.diff.DeleteDelta"[shape = box];
"org.assertj.core.internal.Objects$ByFieldsComparison"[shape = box];
"org.assertj.core.util.diff.myers.MyersDiff$1"[shape = box];
"org.assertj.core.error.future.ShouldHaveFailed"[shape = box];
"org.assertj.core.util.Sets"[shape = box];
"org.assertj.core.api.Java6SoftAssertions"[shape = box];
"org.assertj.core.api.IterableSizeAssert"[shape = box];
"org.assertj.core.presentation.NumberGrouping"[shape = box];
"org.assertj.core.error.ShouldHaveFields"[shape = box];
"org.assertj.core.error.ShouldNotBe"[shape = box];
"org.assertj.core.error.ShouldNotContainSubsequence"[shape = box];
"org.assertj.core.api.AbstractOptionalDoubleAssert"[shape = box];
"org.assertj.core.error.ShouldContainOnly$ErrorType"[shape = box];
"org.assertj.core.internal.Booleans"[shape = box];
"org.assertj.core.api.AbstractLongAssert"[shape = box];
"org.assertj.core.internal.Paths"[shape = box];
"org.assertj.core.api.JUnitSoftAssertions"[shape = box];
"org.assertj.core.api.ShortAssert"[shape = box];
"org.assertj.core.condition.AllOf"[shape = box];
"org.assertj.core.extractor.ToStringExtractor"[shape = box];
"org.assertj.core.internal.StandardComparisonStrategy$1"[shape = box];
"org.assertj.core.error.ShouldNotBeBetween"[shape = box];
"org.assertj.core.api.AtomicIntegerAssert"[shape = box];
"org.assertj.core.api.OptionalAssert"[shape = box];
"org.assertj.core.extractor.Extractors"[shape = box];
"org.assertj.core.api.CharacterAssert"[shape = box];
"org.assertj.core.presentation.BinaryRepresentation"[shape = box];
"org.assertj.core.api.AbstractLocalDateTimeAssert"[shape = box];
"org.assertj.core.api.filter.FilterOperator"[shape = box];
"org.assertj.core.api.InputStreamAssert"[shape = box];
"org.assertj.core.api.AbstractDoubleAssert"[shape = box];
"org.assertj.core.error.ShouldBeDirectory"[shape = box];
"org.assertj.core.error.ShouldBeNullOrEmpty"[shape = box];
"org.assertj.core.api.IntPredicateAssert"[shape = box];
"org.assertj.core.error.ShouldHaveMessageMatchingRegex"[shape = box];
"org.assertj.core.util.Closeables"[shape = box];
"org.assertj.core.api.AbstractOptionalAssert"[shape = box];
"org.assertj.core.api.ComparatorFactory"[shape = box];
"org.assertj.core.error.ShouldAccept"[shape = box];
"org.assertj.core.error.MessageFormatter"[shape = box];
"org.assertj.core.error.ShouldContainValues"[shape = box];
"org.assertj.core.api.ListAssert"[shape = box];
"org.assertj.core.api.Java6Assertions"[shape = box];
"org.assertj.core.error.AbstractShouldHaveTextContent"[shape = box];
"org.assertj.core.error.ShouldNotHaveDuplicates"[shape = box];
"org.assertj.core.util.NullSafeComparator"[shape = box];
"org.assertj.core.error.ShouldContainSequence"[shape = box];
"org.assertj.core.error.ShouldHaveParent"[shape = box];
"org.assertj.core.internal.Maps"[shape = box];
"org.assertj.core.error.ElementsShouldBeExactly"[shape = box];
"org.assertj.core.api.Java6AbstractStandardSoftAssertions"[shape = box];
"org.assertj.core.api.filter.InFilter"[shape = box];
"org.assertj.core.internal.Urls"[shape = box];
"org.assertj.core.api.IntArrayAssert"[shape = box];
"org.assertj.core.api.FileAssert"[shape = box];
"org.assertj.core.error.ShouldMatchPattern"[shape = box];
"org.assertj.core.error.ShouldBeInstance"[shape = box];
"org.assertj.core.error.OptionalShouldBePresent"[shape = box];
"org.assertj.core.internal.Diff"[shape = box];
"org.assertj.core.error.ShouldContainExactly"[shape = box];
"org.assertj.core.matcher.AssertionMatcher"[shape = box];
"org.assertj.core.api.AbstractArrayAssert"[shape = box];
"org.assertj.core.error.ShouldBeReadable"[shape = box];
"org.assertj.core.error.ShouldBeEqual"[shape = box];
"org.assertj.core.error.ShouldBeInThePast"[shape = box];
"org.assertj.core.condition.AnyOf"[shape = box];
"org.assertj.core.internal.ComparatorBasedComparisonStrategy"[shape = box];
"org.assertj.core.error.ShouldBeSubstring"[shape = box];
"org.assertj.core.error.ShouldContainExactlyInAnyOrder$ErrorType"[shape = box];
"org.assertj.core.api.AbstractOptionalLongAssert"[shape = box];
"org.assertj.core.error.ShouldBeEqualIgnoringWhitespace"[shape = box];
"org.assertj.core.internal.Throwables"[shape = box];
"org.assertj.core.error.ShouldNotBeEmpty"[shape = box];
"org.assertj.core.util.diff.Chunk"[shape = box];
"org.assertj.core.error.ShouldContainOnlyNulls"[shape = box];
"org.assertj.core.error.ShouldContainOnlyDigits"[shape = box];
"org.assertj.core.error.uri.ShouldHaveFragment"[shape = box];
"org.assertj.core.api.filter.Filters"[shape = box];
"org.assertj.core.api.ObjectAssertFactory"[shape = box];
"org.assertj.core.api.Java6BDDAssertions"[shape = box];
"org.assertj.core.error.ShouldBeInSameHourWindow"[shape = box];
"org.assertj.core.internal.DeepDifference$DualKey"[shape = box];
"org.assertj.core.condition.Negative"[shape = box];
"org.assertj.core.error.ShouldHaveCause"[shape = box];
"org.assertj.core.api.BDDSoftAssertions"[shape = box];
"org.assertj.core.error.ShouldNotMatch"[shape = box];
"org.assertj.core.error.OptionalShouldBeEmpty"[shape = box];
"org.assertj.core.error.uri.ShouldHaveQuery"[shape = box];
"org.assertj.core.error.ShouldContainOnly"[shape = box];
"org.assertj.core.util.IterableUtil"[shape = box];
"org.assertj.core.error.ShouldMatch"[shape = box];
"org.assertj.core.api.AbstractPredicateAssert"[shape = box];
"org.assertj.core.internal.RecursiveFieldByFieldComparator"[shape = box];
"org.assertj.core.error.ShouldNotContainValue"[shape = box];
"org.assertj.core.internal.ExtendedByTypesComparator$1"[shape = box];
"org.assertj.core.error.ShouldHaveAtIndex"[shape = box];
"org.assertj.core.util.Arrays"[shape = box];
"org.assertj.core.util.introspection.PropertyOrFieldSupport"[shape = box];
"org.assertj.core.error.ShouldNotHaveAnyElementsOfTypes"[shape = box];
"org.assertj.core.api.ClassAssert"[shape = box];
"org.assertj.core.error.ShouldBeSymbolicLink"[shape = box];
"org.assertj.core.api.IntegerAssert"[shape = box];
"org.assertj.core.api.LocalTimeAssert"[shape = box];
"org.assertj.core.util.diff.InsertDelta"[shape = box];
"org.assertj.core.configuration.ConfigurationProvider"[shape = box];
"org.assertj.core.error.ShouldBeAnArray"[shape = box];
"org.assertj.core.error.ShouldHaveBinaryContent"[shape = box];
"org.assertj.core.api.SoftAssertionMapAssert"[shape = box];
"org.assertj.core.error.future.ShouldNotBeCompletedExceptionally"[shape = box];
"org.assertj.core.api.SoftAssertionError"[shape = box];
"org.assertj.core.error.ShouldHaveNoSuppressedExceptions"[shape = box];
"org.assertj.core.util.Strings"[shape = box];
"org.assertj.core.error.ShouldHave"[shape = box];
"org.assertj.core.error.ShouldHaveRootCauseExactlyInstance"[shape = box];
"org.assertj.core.error.ShouldNotContainKey"[shape = box];
"org.assertj.core.description.Description"[shape = box];
"org.assertj.core.error.ElementsShouldSatisfy"[shape = box];
"org.assertj.core.error.DescriptionFormatter"[shape = box];
"org.assertj.core.error.ShouldHaveRootCauseInstance"[shape = box];
"org.assertj.core.error.ShouldNotHave"[shape = box];
"org.assertj.core.api.SoftAssertionIterableAssert"[shape = box];
"org.assertj.core.error.ShouldBeBeforeOrEqualsTo"[shape = box];
"org.assertj.core.error.ShouldNotHaveSameClass"[shape = box];
"org.assertj.core.internal.CharArrays"[shape = box];
"org.assertj.core.api.JUnitBDDSoftAssertions"[shape = box];
"org.assertj.core.api.AtomicReferenceArrayAssert"[shape = box];
"org.assertj.core.api.DoubleArrayAssert"[shape = box];
"org.assertj.core.error.ShouldBeEqualIgnoringTimezone"[shape = box];
"org.assertj.core.api.AbstractLocalTimeAssert"[shape = box];
"org.assertj.core.error.ShouldBeInterface"[shape = box];
"org.assertj.core.api.AbstractInputStreamAssert"[shape = box];
"org.assertj.core.error.ShouldHaveCauseInstance"[shape = box];
"org.assertj.core.error.ConditionAndGroupGenericParameterTypeShouldBeTheSame"[shape = box];
"org.assertj.core.api.ClassBasedNavigableIterableAssert"[shape = box];
"org.assertj.core.error.ShouldContainOnlyKeys"[shape = box];
"org.assertj.core.internal.Shorts"[shape = box];
"org.assertj.core.api.AbstractMapAssert"[shape = box];
"org.assertj.core.extractor.ResultOfExtractor"[shape = box];
"org.assertj.core.error.ShouldBeLessOrEqual"[shape = box];
"org.assertj.core.internal.Lists"[shape = box];
"org.assertj.core.error.future.ShouldNotBeCompleted"[shape = box];
"org.assertj.core.util.Compatibility"[shape = box];
"org.assertj.core.error.ShouldNotContainAtIndex"[shape = box];
"org.assertj.core.internal.Strings"[shape = box];
"org.assertj.core.error.ShouldNotBeInstanceOfAny"[shape = box];
"org.assertj.core.api.AbstractBigDecimalAssert"[shape = box];
"org.assertj.core.data.TemporalUnitOffset"[shape = box];
"org.assertj.core.error.future.ShouldBeCompletedExceptionally"[shape = box];
"org.assertj.core.internal.BinaryDiffResult"[shape = box];
"org.assertj.core.api.ThrowableAssert"[shape = box];
"org.assertj.core.error.ShouldBeAfter"[shape = box];
"org.assertj.core.error.ShouldHaveSameSizeAs"[shape = box];
"org.assertj.core.internal.ObjectArrayElementComparisonStrategy"[shape = box];
"org.assertj.core.error.ShouldContainExactlyInAnyOrder"[shape = box];
"org.assertj.core.data.Percentage"[shape = box];
"org.assertj.core.error.ShouldBeEqualNormalizingWhitespace"[shape = box];
"org.assertj.core.internal.ErrorMessages"[shape = box];
"org.assertj.core.error.OptionalShouldContainInstanceOf"[shape = box];
"org.assertj.core.util.Maps"[shape = box];
"org.assertj.core.error.ShouldContainOnlyNulls$ErrorType"[shape = box];
"org.assertj.core.error.ShouldHaveMessage"[shape = box];
"org.assertj.core.error.ShouldBeInSameSecond"[shape = box];
"org.assertj.core.api.AbstractSoftAssertions"[shape = box];
"org.assertj.core.api.IterableAssert$LazyIterable"[shape = box];
"org.assertj.core.api.Java6AbstractBDDSoftAssertions"[shape = box];
"org.assertj.core.error.ShouldBeEmpty"[shape = box];
"org.assertj.core.groups.FieldsOrPropertiesExtractor"[shape = box];
"org.assertj.core.error.ShouldOnlyHaveFields"[shape = box];
"org.assertj.core.api.AbstractDateAssert$1"[shape = box];
"org.assertj.core.error.ElementsShouldBe"[shape = box];
"org.assertj.core.api.SoftAssertions"[shape = box];
"org.assertj.core.error.uri.ShouldHaveScheme"[shape = box];
"org.assertj.core.error.ShouldBeLowerCase"[shape = box];
"org.assertj.core.util.introspection.Introspection"[shape = box];
"org.assertj.core.error.ShouldHaveDateField"[shape = box];
"org.assertj.core.error.future.ShouldBeCompleted"[shape = box];
"org.assertj.core.internal.ExtendedByTypesComparator"[shape = box];
"org.assertj.core.api.AbstractAtomicFieldUpdaterAssert"[shape = box];
"org.assertj.core.error.ShouldNotBeEqualNormalizingWhitespace"[shape = box];
"org.assertj.core.presentation.Representation"[shape = box];
"org.assertj.core.error.ShouldNotAccept"[shape = box];
"org.assertj.core.api.AbstractClassAssert"[shape = box];
"org.assertj.core.error.ShouldBeEqualIgnoringNewLineDifferences"[shape = box];
"org.assertj.core.error.ShouldNotContainSequence"[shape = box];
"org.assertj.core.error.ShouldHavePropertyOrField"[shape = box];
"org.assertj.core.error.ShouldNotContainPattern"[shape = box];
"org.assertj.core.api.AssertionsForInterfaceTypes"[shape = box];
"org.assertj.core.api.OptionalDoubleAssert"[shape = box];
"org.assertj.core.error.ShouldExist"[shape = box];
"org.assertj.core.api.AbstractOffsetDateTimeAssert"[shape = box];
"org.assertj.core.error.uri.ShouldHavePath"[shape = box];
"org.assertj.core.api.AbstractLongArrayAssert"[shape = box];
"org.assertj.core.internal.ByteArrays"[shape = box];
"org.assertj.core.description.EmptyTextDescription"[shape = box];
"org.assertj.core.util.TextFileWriter"[shape = box];
"org.assertj.core.api.ObjectArrayAssert"[shape = box];
"org.assertj.core.util.FailureMessages"[shape = box];
"org.assertj.core.internal.Files"[shape = box];
"org.assertj.core.error.ShouldBeEqualIgnoringHours"[shape = box];
"org.assertj.core.error.ShouldNotHaveThrown"[shape = box];
"org.assertj.core.internal.Conditions"[shape = box];
"org.assertj.core.api.UrlAssert"[shape = box];
"org.assertj.core.api.AtomicLongArrayAssert"[shape = box];
"org.assertj.core.error.ShouldHaveAnnotations"[shape = box];
"org.assertj.core.api.UriAssert"[shape = box];
"org.assertj.core.api.Condition"[shape = box];
"org.assertj.core.error.ElementsShouldHaveAtMost"[shape = box];
"org.assertj.core.api.AbstractIntArrayAssert"[shape = box];
"org.assertj.core.error.ShouldOnlyHaveFields$ErrorType"[shape = box];
"org.assertj.core.api.AbstractPathAssert"[shape = box];
"org.assertj.core.api.AbstractPredicateLikeAssert"[shape = box];
"org.assertj.core.presentation.UnicodeRepresentation"[shape = box];
"org.assertj.core.api.AbstractByteAssert"[shape = box];
"org.assertj.core.util.Strings$StringsToJoin"[shape = box];
"org.assertj.core.api.AbstractBooleanArrayAssert"[shape = box];
"org.assertj.core.api.MapSizeAssert"[shape = box];
"org.assertj.core.api.AbstractFileAssert"[shape = box];
"org.assertj.core.error.ShouldBeWritable"[shape = box];
"org.assertj.core.error.NoElementsShouldMatch"[shape = box];
"org.assertj.core.util.BigDecimalComparator"[shape = box];
"org.assertj.core.util.diff.myers.Equalizer"[shape = box];
"org.assertj.core.api.Java6JUnitBDDSoftAssertions$1"[shape = box];
"org.assertj.core.internal.DeepDifference$Difference"[shape = box];
"org.assertj.core.error.ShouldBeGreater"[shape = box];
"org.assertj.core.api.AbstractOffsetTimeAssert"[shape = box];
"org.assertj.core.api.AbstractFloatAssert"[shape = box];
"org.assertj.core.data.TemporalUnitLessThanOffset"[shape = box];
"org.assertj.core.data.TemporalUnitWithinOffset"[shape = box];
"org.assertj.core.error.ShouldBeEqualIgnoringCase"[shape = box];
"org.assertj.core.error.ShouldBeSame"[shape = box];
"org.assertj.core.api.AbstractCharacterAssert"[shape = box];
"org.assertj.core.error.ShouldHaveMethods"[shape = box];
"org.assertj.core.api.filter.NotFilter"[shape = box];
"org.assertj.core.api.PredicateAssert"[shape = box];
"org.assertj.core.api.ObjectAssert"[shape = box];
"org.assertj.core.error.ShouldHaveSameContent"[shape = box];
"org.assertj.core.internal.Uris"[shape = box];
"org.assertj.core.error.ShouldNotBeOfClassIn"[shape = box];
"org.assertj.core.error.ShouldBeEqualByComparingFieldByFieldRecursively"[shape = box];
"org.assertj.core.error.ShouldBeInSameMinuteWindow"[shape = box];
"org.assertj.core.internal.DoubleArrays"[shape = box];
"org.assertj.core.error.ShouldContain"[shape = box];
"org.assertj.core.api.ThrowableTypeAssert"[shape = box];
"org.assertj.core.error.future.ShouldBeDone"[shape = box];
"org.assertj.core.error.ShouldNotBeEqualWithinOffset"[shape = box];
"org.assertj.core.internal.Numbers"[shape = box];
"org.assertj.core.internal.LongArrays"[shape = box];
"org.assertj.core.api.Fail"[shape = box];
"org.assertj.core.api.JUnitBDDSoftAssertions$1"[shape = box];
"org.assertj.core.api.AbstractObjectAssert"[shape = box];
"org.assertj.core.util.diff.Patch"[shape = box];
"org.assertj.core.api.ZonedDateTimeAssert"[shape = box];
"org.assertj.core.api.AtomicReferenceAssert"[shape = box];
"org.assertj.core.internal.Failures"[shape = box];
"org.assertj.core.error.ShouldBeCloseTo"[shape = box];
"org.assertj.core.error.ShouldBeEqualIgnoringNanos"[shape = box];
"org.assertj.core.api.AbstractAssert"[shape = box];
"org.assertj.core.api.BooleanArrayAssert"[shape = box];
"org.assertj.core.error.ElementsShouldHaveAtLeast"[shape = box];
"org.assertj.core.error.ShouldBeInTheFuture"[shape = box];
"org.assertj.core.error.uri.ShouldHaveAuthority"[shape = box];
"org.assertj.core.error.ShouldBeInSameMinute"[shape = box];
"org.assertj.core.api.StringAssert"[shape = box];
"org.assertj.core.util.diff.DeltaComparator"[shape = box];
"org.assertj.core.api.ThrowableAssertAlternative"[shape = box];
"org.assertj.core.api.AbstractByteArrayAssert"[shape = box];
"org.assertj.core.error.ShouldHaveSameHourAs"[shape = box];
"org.assertj.core.error.ShouldBeExactlyInstanceOf"[shape = box];
"org.assertj.core.internal.Dates"[shape = box];
"org.assertj.core.api.AbstractComparableAssert"[shape = box];
"org.assertj.core.extractor.ByNameSingleExtractor"[shape = box];
"org.assertj.core.error.ShouldEndWithPath"[shape = box];
"org.assertj.core.api.AtomicBooleanAssert"[shape = box];
"org.assertj.core.error.ShouldBeRegularFile"[shape = box];
"org.assertj.core.error.ShouldBeUpperCase"[shape = box];
"org.assertj.core.api.AbstractFloatArrayAssert"[shape = box];
"org.assertj.core.util.diff.Delta"[shape = box];
"org.assertj.core.error.ShouldHaveSuppressedException"[shape = box];
"org.assertj.core.error.ShouldHaveExtension"[shape = box];
"org.assertj.core.api.AbstractCharSequenceAssert"[shape = box];
"org.assertj.core.api.FloatArrayAssert"[shape = box];
"org.assertj.core.internal.BinaryDiff"[shape = box];
"org.assertj.core.error.ShouldBeBeforeYear"[shape = box];
"org.assertj.core.api.AbstractShortArrayAssert"[shape = box];
"org.assertj.core.api.AbstractBooleanAssert"[shape = box];
"org.assertj.core.api.AutoCloseableSoftAssertions"[shape = box];
"org.assertj.core.error.ConstructorInvoker$SetAccessibleValueAction"[shape = box];
"org.assertj.core.error.uri.ShouldHavePort"[shape = box];
"org.assertj.core.api.LongAssert"[shape = box];
"org.assertj.core.error.ShouldHaveNoParent"[shape = box];
"org.assertj.core.error.ShouldBeSorted"[shape = box];
"org.assertj.core.api.AutoCloseableBDDSoftAssertions"[shape = box];
"org.assertj.core.api.DoublePredicateAssert"[shape = box];
"org.assertj.core.api.AbstractListAssert"[shape = box];
"org.assertj.core.error.ShouldBeSubsetOf"[shape = box];
"org.assertj.core.api.OptionalIntAssert"[shape = box];
"org.assertj.core.util.DateUtil"[shape = box];
"org.assertj.core.error.ShouldNotContainNull"[shape = box];
"org.assertj.core.error.ShouldBeExecutable"[shape = box];
"org.assertj.core.error.ShouldNotContainCharSequence"[shape = box];
"org.assertj.core.error.ShouldBeRelativePath"[shape = box];
"org.assertj.core.api.Java6JUnitSoftAssertions$1"[shape = box];
"org.assertj.core.api.LocalDateAssert"[shape = box];
"org.assertj.core.error.ShouldBeNormalized"[shape = box];
"org.assertj.core.internal.IterableDiff"[shape = box];
"org.assertj.core.error.ShouldOnlyHaveElementsOfTypes"[shape = box];
"org.assertj.core.error.ShouldHaveOnlyElementsOfType"[shape = box];
"org.assertj.core.api.LocalDateTimeAssert"[shape = box];
"org.assertj.core.api.AbstractEnumerableAssert"[shape = box];
"org.assertj.core.error.ShouldHaveNoFields"[shape = box];
"org.assertj.core.api.AtomicIntegerFieldUpdaterAssert"[shape = box];
"org.assertj.core.error.ShouldHaveNoCause"[shape = box];
"org.assertj.core.error.OptionalShouldContain"[shape = box];
"org.assertj.core.internal.Classes"[shape = box];
"org.assertj.core.api.Java6JUnitBDDSoftAssertions"[shape = box];
"org.assertj.core.api.CharArrayAssert"[shape = box];
"org.assertj.core.internal.Strings$Whitespace"[shape = box];
"org.assertj.core.error.BasicErrorMessageFactory"[shape = box];
"org.assertj.core.error.ShouldNotBeInstance"[shape = box];
"org.assertj.core.util.diff.myers.DiffNode"[shape = box];
"org.assertj.core.error.uri.ShouldHaveAnchor"[shape = box];
"org.assertj.core.api.FactoryBasedNavigableIterableAssert"[shape = box];
"org.assertj.core.error.ShouldContainKeys"[shape = box];
"org.assertj.core.api.ClassBasedNavigableListAssert"[shape = box];
"org.assertj.core.error.ShouldHaveReference"[shape = box];
"org.assertj.core.error.ShouldBeEqualToIgnoringFields"[shape = box];
"org.assertj.core.error.ClassModifierShouldBe"[shape = box];
"org.assertj.core.error.ShouldBeLess"[shape = box];
"org.assertj.core.error.ShouldNotBeExactlyInstanceOf"[shape = box];
"org.assertj.core.api.ShortArrayAssert"[shape = box];
"org.assertj.core.util.Lists"[shape = box];
"org.assertj.core.util.ArrayWrapperList"[shape = box];
"org.assertj.core.api.SoftAssertionClassAssert"[shape = box];
"org.assertj.core.internal.RealNumbers"[shape = box];
"org.assertj.core.error.uri.ShouldHaveProtocol"[shape = box];
"org.assertj.core.data.MapEntry"[shape = box];
"org.assertj.core.error.ShouldContainCharSequence"[shape = box];
"org.assertj.core.internal.IterableElementComparisonStrategy"[shape = box];
"org.assertj.core.api.ByteAssert"[shape = box];
"org.assertj.core.api.AbstractCompletableFutureAssert"[shape = box];
"org.assertj.core.internal.TypeComparators"[shape = box];
"org.assertj.core.internal.AtomicReferenceArrayElementComparisonStrategy"[shape = box];
"org.assertj.core.error.ShouldBeInSameMonth"[shape = box];
"org.assertj.core.api.OffsetDateTimeAssert"[shape = box];
"org.assertj.core.api.AbstractDoubleArrayAssert"[shape = box];
"org.assertj.core.error.ShouldBeOfClassIn"[shape = box];
"org.assertj.core.api.GenericComparableAssert"[shape = box];
"org.assertj.core.api.AtomicLongAssert"[shape = box];
"org.assertj.core.internal.FieldByFieldComparator"[shape = box];
"org.assertj.core.internal.BooleanArrays"[shape = box];
"org.assertj.core.util.Compatibility$System"[shape = box];
"org.assertj.core.api.IterableAssert"[shape = box];
"org.assertj.core.api.BDDAssertions"[shape = box];
"org.assertj.core.error.ShouldContainCharSequenceOnlyOnce"[shape = box];
"org.assertj.core.error.ShouldNotContain"[shape = box];
"org.assertj.core.error.ShouldContainKey"[shape = box];
"org.assertj.core.api.AbstractLocalDateAssert"[shape = box];
"org.assertj.core.api.BigIntegerAssert"[shape = box];
"org.assertj.core.api.AssertionsForClassTypes"[shape = box];
"org.assertj.core.error.ShouldHaveSize"[shape = box];
"org.assertj.core.error.ShouldBeAnnotation"[shape = box];
"org.assertj.core.error.uri.ShouldHaveHost"[shape = box];
"org.assertj.core.error.ElementsShouldHaveExactly"[shape = box];
"org.assertj.core.internal.NioFilesWrapper"[shape = box];
"org.assertj.core.api.filter.NotInFilter"[shape = box];
"org.assertj.core.condition.Join"[shape = box];
"org.assertj.core.api.AbstractShortAssert"[shape = box];
"org.assertj.core.api.ComparatorFactory$1"[shape = box];
"org.assertj.core.error.ElementsShouldMatch"[shape = box];
"org.assertj.core.error.ShouldStartWith"[shape = box];
"org.assertj.core.error.uri.ShouldHaveParameter"[shape = box];
"org.assertj.core.error.ShouldBeEqualIgnoringMinutes"[shape = box];
"org.assertj.core.api.AtomicIntegerArrayAssert"[shape = box];
"org.assertj.core.api.AbstractBigIntegerAssert"[shape = box];
"org.assertj.core.api.ByteArrayAssert"[shape = box];
"org.assertj.core.error.ShouldBeCanonicalPath"[shape = box];
"org.assertj.core.error.ShouldBeAssignableFrom"[shape = box];
"org.assertj.core.error.ShouldBeInSameSecondWindow"[shape = box];
"org.assertj.core.error.ShouldBeInSameDay"[shape = box];
"org.assertj.core.error.ShouldContainCharSequenceSequence"[shape = box];
"org.assertj.core.error.ShouldBeMarked"[shape = box];
"org.assertj.core.internal.InputStreamsException"[shape = box];
"org.assertj.core.util.diff.myers.MyersDiff"[shape = box];
"org.assertj.core.error.ShouldBeAbsolutePath"[shape = box];
"org.assertj.core.api.BooleanAssert"[shape = box];
"org.assertj.core.api.Assertions"[shape = box];
"org.assertj.core.api.PathAssert"[shape = box];
"org.assertj.core.error.ShouldHaveContent"[shape = box];
"org.assertj.core.internal.BigDecimals"[shape = box];
"org.assertj.core.api.FactoryBasedNavigableListAssert"[shape = box];
"org.assertj.core.api.ComparatorFactory$2"[shape = box];
"org.assertj.core.util.Preconditions"[shape = box];
"org.assertj.core.internal.Integers"[shape = box];
"org.assertj.core.internal.CommonValidations"[shape = box];
"org.assertj.core.groups.Properties"[shape = box];
"org.assertj.core.error.ConstructorInvoker"[shape = box];
"org.assertj.core.error.ElementsShouldNotBe"[shape = box];
}